@use "context";
@use "messages";
@use "results";
@use "stats";

// Tests
// =====



// Test
// ----
/// The `test()` wrapper-mixin groups related assertions,
/// to describe the behavior they are testing.
/// Tests should always contain one or more assertions.
/// @group api-test
/// @param {string} $name -
///   Describe what is being tested
/// @content Include any assertions that are part of this test
/// @example scss
///   @include test('Returns lists zipped together') {
///     @include assert-equal(
///       zip(a b c, 1 2 3),
///       (a 1, b 2, c 3));
///     @include assert-equal(
///       zip(1px 1px 3px, solid dashed solid, red green blue),
///       (1px solid red, 1px dashed green, 3px solid blue));
///   }
@mixin test(
  $name
) {
  @include test-start($name);
  @content;
  @include test-stop;
}



// Test
// ----
/// Describe the behavior being tested.
/// This works just like `test()`,
/// providing a wrapper for one or more assertions.
/// @alias test
/// @group api-test
/// @param {string} $name -
///   Describe the behavior being tested
/// @content Include any assertions that are part of testing this behavior
/// @example scss
///   @include it('Returns lists zipped together') {
///     @include assert-equal(
///       zip(a b c, 1 2 3),
///       (a 1, b 2, c 3));
///     @include assert-equal(
///       zip(1px 1px 3px, solid dashed solid, red green blue),
///       (1px solid red, 1px dashed green, 3px solid blue));
///   }
@mixin it(
  $name
) {
  @include test($name) {
    @content;
  }
}



// Test Start
// ----------
/// Test start helper
/// @access private
/// @group private-test
/// @param {string} $name -
///   Describe what is being tested
@mixin test-start(
  $name
) {
  @include context.context('test', $name);
  @include messages.message('Test: #{$name}', 'comments');
}



// Test Stop
// ---------
/// Test stop helper
/// @access private
/// @group private-test
@mixin test-stop {
  @include results.update(results.$test-result);
  @include stats.update-stats-count('tests');
  @include context.context-pop;
  @include messages.message('', 'comments');
}
