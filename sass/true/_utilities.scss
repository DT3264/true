@use "sass:list";
@use "sass:map";
@use "messages";

// Utilities
// =========

// True Error Output Override
// --------------------------
/// Override error-output for the purpose of testing failure-cases
/// @access private
/// @group private-utils
/// @type bool
$error-output-override: false !default;

// True Error [function]
// ---------------------
/// Optionally override error-output for testing failure-cases
/// @access private
/// @group private-utils
/// @param {string} $message -
///   The error to report
/// @param {string} $source -
///   The source of the error
/// @param {bool} $override [$error-output-override] -
///   Optionally override error-output for testing failure-cases
/// @return {string}
///   A message detailing the source and error,
///   when the `$override` is `true`
/// @throw
///   A message detailing the source and error,
///   when the `$override` is `false`
@function error($message, $source, $override: $error-output-override) {
  @if $override {
    @return 'ERROR [#{$source}] #{$message}';
  }

  @error '[#{$source}] #{$message}';
}

// True Error [mixin]
// ---------------------
/// Optionally override error-output for testing failure-cases
/// @access private
/// @group private-utils
/// @param {string} $message -
///   The error to report
/// @param {string} $source -
///   The source of the error
/// @param {bool} $override [$error-output-override] -
///   Optionally override error-output for testing failure-cases
/// @output
///   A message detailing the source and error,
///   when the `$override` is `true`
/// @throw
///   A message detailing the source and error,
///   when the `$override` is `false`
@mixin error($message, $source, $override: $error-output-override) {
  @if $override {
    $error: 'ERROR [#{$source}] #{$message}';
    @include messages.message($error, 'comments');
  } @else {
    @error '[#{$source}] #{$message}';
  }
}

// Map Increment
// -------------
/// Add map values together
/// @access private
/// @group private-utils
/// @param {map} $base -
///   Initial map to add values to
/// @paramÂ {map} $add -
///   Map of values to be added
/// @return {map}
@function map-increment($base, $add) {
  @each $key in map.keys($add) {
    $value: map.get($add, $key);

    @if $value {
      $base-value: map.get($base, $key);
      $new-value: if($base-value, $base-value + $value, $value);
      $base: map.merge(
        $base,
        (
          $key: $new-value,
        )
      );
    }
  }

  @return $base;
}

// Join Multiple
// -------------
/// Extends the Sass `join()` function
/// to accept and combine any number of lists
/// @access private
/// @group private-utils
/// @param {list | 'space' | 'comma'} $lists... -
///   Any number of lists to be joined,
///   with an optional final argument describing
///   the desired list-separator ('space' or 'comma')
/// @return {list} Joined items in a single list
@function join-multiple($lists...) {
  $return: list.nth($lists, 1);
  $type: list.separator($return);
  $last: list.nth($lists, -1);
  $length: list.length($lists);

  @if ($last == 'space') or ($last == 'comma') {
    $length: $length - 1;
    $type: $last;
  }

  @if ($length < 2) {
    $error: 'Must provide at least 2 lists';
    @return error($error, 'join-multiple');
  }

  @for $i from 2 through $length {
    $return: list.join($return, list.nth($lists, $i), $type);
  }

  @return $return;
}
