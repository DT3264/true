@use "sass:meta";
@use "context";
@use "messages";
@use "output";
@use "results";
@use "settings";
@use "stats";

// Assert
// ======



// Assert True
// -----------
/// Assert that a parameter is truthy.
/// - Empty lists and strings are excluded from default Sass truthyness.
/// Assertions are used inside the `test()` mixin
///
/// @group api-assert-values
///
/// @param {*} $assert -
///   Asserted value to test
/// @param {string} $description [null] -
///   Description of the assertion being tested.
///   A `null` of `false` value generates a default description.
///
/// @example scss -
///   @include test('Non-empty strings are truthy') {
///     @include assert-true(
///       'Hello World',
///       'You can optionally describe the assertion...');
///   }
@mixin assert-true(
  $assert,
  $description: null
) {
  $default: context.context('test');
  $truthy: is-truthy($assert);

  @include context.context('assert', '[assert-true] #{$description or $default}');
  @include assert-results($truthy, true);
}


// Assert False
// ------------
/// Assert that a parameter is falsey.
/// - Empty lists and strings are added to default Sass falseyness.
/// to define the expected results of the test.
///
/// @group api-assert-values
///
/// @param {*} $assert -
///   Asserted value to test
/// @param {string} $description [null] -
///   Description of the assertion being tested.
///   A `null` of `false` value generates a default description.
///
/// @example scss -
///   @include test('Empty strings are falsey') {
///     @include assert-false(
///       '',
///       'You can optionally describe the assertion...');
///   }
@mixin assert-false(
  $assert,
  $description: null
) {
  $default: context.context('test');
  $falsey: not is-truthy($assert);

  @include context.context('assert', '[assert-false] #{$description or $default}');
  @include assert-results($falsey, true);
}


// Assert Equal
// ------------
/// Assert that two parameters are `equal`
/// Assertions are used inside the `test()` mixin
/// to define the expected results of the test.
///
/// @group api-assert-values
///
/// @param {*} $assert -
///   Asserted value to test
/// @param {*} $expected -
///   Expected match
/// @param {string} $description [null] -
///   Description of the assertion being tested
///   (a `null` of `false` value generates a default description)
/// @param {bool} $inspect [false] -
///   Optionally compare inspected values
///   (useful for comparing CSS output rather than Sass values)
///
/// @example scss -
///   @include test('Division works as expected in Sass') {
///     @include assert-equal(
///       8 / 2,
///       4,
///       'You can optionally describe the assertion...');
///   }
@mixin assert-equal(
  $assert,
  $expected,
  $description: null,
  $inspect: false
) {
  $default: context.context('test');

  @if $inspect {
    $assert: meta.inspect($assert);
    $expected: meta.inspect($expected);
  }

  @include context.context('assert', '[assert-equal] #{$description or $default}');
  @include assert-results($assert, $expected);
}


// Assert UnEqual
// --------------
/// Assert that two parameters are `unequal`
/// Assertions are used inside the `test()` mixin
/// to define the expected results of the test.
///
/// @group api-assert-values
///
/// @param {*} $assert -
///   Asserted value to test
/// @param {*} $expected -
///   Expected mismatch
/// @param {string} $description [null] -
///   Description of the assertion being tested.
///   A `null` of `false` value generates a default description.
/// @param {bool} $inspect [false] -
///   Optionally compare inspected values
///   (useful for comparing CSS output rather than Sass values)
///
/// @example scss -
///   @include test('Strings and numbers hare not the same') {
///     @include assert-unequal(
///       1em,
///       '1em');
///   }
@mixin assert-unequal(
  $assert,
  $expected,
  $description: null,
  $inspect: false
) {
  $default: context.context('test');

  @if $inspect {
    $assert: meta.inspect($assert);
    $expected: meta.inspect($expected);
  }

  @include context.context('assert', '[assert-unequal] #{$description or $default}');
  @include assert-results($assert, $expected, 'unequal');
}



// Assert [output]
// ---------------
/// Define a CSS-output assertion.
/// Assertions are used inside the `test()` mixin
/// to define the expected results of the test.
/// - The `assert()` mixin is a wrapper,
///   and should contain one `output()` block and one `expect()` block
///   as nested contents.
/// - These three mixins together describe a single
///   `assert-equal` comparison on output CSS.
///   The compiled CSS-results of the `output()` mixin
///   will be compared against the results of the `expect()` mixin.
/// - When using Mocha integration, the output comparison is automated –
///   otherwise you will have to compare the output manually.
///   Using `git diff` is a great way to watch for changes in output.
///
/// @group api-assert-output
///
/// @param {string} $description [null] -
///   Description of the assertion being tested.
///   A `null` of `false` value generates a default description.
///
/// @content Use `output()` and `expect()` mixins
///   to define blocks for comparison
///
/// @example scss -
///   @include test('Sass math compiles before output') {
///     @include assert('You can also describe the assertion...') {
///       @include output {
///         width: 14em + 2;
///       }
///       @include expect {
///         width: 16em;
///       }
///     }
///   }
@mixin assert(
  $description: null
) {
  $default: context.context('test');
  @include context.output-context('assert');
  @include context.context('assert', '[output] #{$description or $default}');
  @include messages.message('  ASSERT: #{$description}  ', 'comments');

  @content;

  @include context.output-context(null);
  @include results.update-test('output-to-css');
  @include stats.update-stats-count('assertions');
  @include context.context-pop;
  @include messages.message('  END_ASSERT  ', 'comments');
}



// Output
// ------
/// Describe the test content to be evaluated
/// against the paired `expect()` block.
/// Assertions are used inside the `test()` mixin
/// to define the expected results of the test.
/// - The `output()` mixin requires a content block,
///   and should be nested inside the `assert()` mixin
///   along with a single `expect()` block.
/// - These three mixins together describe a single
///   `assert-equal` comparison on output CSS.
///   The compiled CSS-results of the `output()` mixin
///   will be compared against the results of the `expect()` mixin.
/// - When using Mocha integration, the output comparison is automated –
///   otherwise you will have to compare the output manually.
///   Using `git diff` is a great way to watch for changes in output.
///
/// @group api-assert-output
///
/// @param {bool} $selector [true] -
///   Optionally wrap the contents in a `.test-output` selector block,
///   so you can test property-value output directly.
///
/// @content Define the test content to be checked
///
/// @example scss -
///   @include test('Sass math compiles before output') {
///     @include assert {
///       @include output {
///         width: 14em + 2;
///       }
///       @include expect {
///         width: 16em;
///       }
///     }
///   }
@mixin output(
  $selector: true
) {
  @include context.output-context('output');
  @include messages.message('  OUTPUT  ', 'comments');

  @if $selector {
    .test-output {
      @content;
    }
  } @else {
    @content;
  }

  @include messages.message('  END_OUTPUT  ', 'comments');
}



// Expect
// ------
/// Describe the expected results of the paired `output()` block.
/// The `expect()` mixin requires a content block,
/// and should be nested inside the `assert()` mixin,
/// along with a single `output()` block.
/// Assertions are used inside the `test()` mixin
/// to define the expected results of the test.
/// - These three mixins together describe a single
///   `assert-equal` comparison on output CSS.
///   The compiled CSS-results of the `output()` mixin
///   will be compared against the results of the `expect()` mixin.
/// - When using Mocha integration, the output comparison is automated –
///   otherwise you will have to compare the output manually.
///   Using `git diff` is a great way to watch for changes in output.
///
/// @group api-assert-output
///
/// @param {bool} $selector [true] -
///   Optionally wrap the contents in a `.test-output` selector block,
///   so you can test property-value output directly.
///
/// @content Define the expected results of a sibling `output()` mixin
///
/// @example scss -
///   @include test('Sass math compiles before output') {
///     @include assert {
///       @include output {
///         width: 14em + 2;
///       }
///       @include expect {
///         width: 16em;
///       }
///     }
///   }
@mixin expect(
  $selector: true
) {
  @include context.output-context('expect');
  @include messages.message('  EXPECTED  ', 'comments');

  @if $selector {
    .test-output {
      @content;
    }
  } @else {
    @content;
  }

  @include messages.message('  END_EXPECTED  ', 'comments');
}

// Contains
// ------
/// Describe the expected results of the paired `output()` block.
/// The `contains()` mixin requires a content block,
/// and should be nested inside the `assert()` mixin,
/// along with a single `output()` block.
/// Assertions are used inside the `test()` mixin
/// to define the expected results of the test.
/// - These three mixins together describe a single
///   comparison on output CSS.
///   The compiled CSS-results of the `contains()` mixin
///   will be compared against the results of the `output()` mixin
///   to see if all of the `contains` CSS is within the `output` CSS.
/// - When using Mocha integration, the output comparison is automated –
///   otherwise you will have to compare the output manually.
///   Using `git diff` is a great way to watch for changes in output.
///
/// @group api-assert-output
///
/// @param {bool} $selector [true] -
///   Optionally wrap the contents in a `.test-output` selector block,
///   so you can test property-value output directly.
///
/// @content Define the expected results of a sibling `output()` mixin
///
/// @example scss -
///   @include test('Sass math compiles before output') {
///     @include assert {
///       @include output {
///         height: 100%;
///         width: 14em + 2;
///       }
///       @include contains {
///         width: 16em;
///       }
///     }
///   }
@mixin contains(
  $selector: true
) {
  @include context.output-context('contains');
  @include messages.message('  CONTAINED  ', 'comments');

  @if $selector {
    .test-output {
      @content;
    }
  } @else {
    @content;
  }

  @include messages.message('  END_CONTAINED  ', 'comments');
}


// Assert Results
// --------------
/// Get an official result,
/// record it in the database and output,
/// provide details as necessary,
/// and end the assertion.
///
/// @access private
/// @group private-assert
///
/// @param {*} $assert - Value to consider
/// @param {*} $expected - Expected match
/// @param {bool} $unequal [false] -
///   Set to `true` if the comparison is expected to fail
///
/// @output - Document the passing or failing result of the test
@mixin assert-results(
  $assert,
  $expected,
  $unequal: false,
  $terminal: settings.$terminal-output
) {
  $result: results.get-result($assert, $expected, $unequal);

  @if $result == 'pass' {
    @include output.pass-details;
  } @else {
    @include output.fail-details($assert, $expected, $terminal);
  }

  @include results.update-test($result);
  @include stats.update-stats-count('assertions');
  @include context.context-pop;
}


// Is Truthy
// ---------
/// Check that a value is truthy
/// (empty lists and strings return false)
///
/// @access private
/// @group private-assert
///
/// @param {*} $assert - Value to consider
///
/// @return {bool}
@function is-truthy(
  $assert
) {
  $not: (not not $assert);
  $list: ($assert != ());
  $string: ($assert != '');
  $truthy: if(($not and $list and $string), true, false);

  @return $truthy;
}
