@use '../config';
@use '../data';

@mixin content(
  $name,
  $block,
  $selector: true,
  $description: null,
) {
  $start: if($description, '#{$block}: #{$description}', $block);
  @include data.output-context($name);
  @include config.message('  #{$start}  ', 'comments');
  @if $selector {
    .test-output {
      @content;
    }
  } @else {
    @content;
  }
  @include config.message('  END_#{$block}  ', 'comments');
}

@mixin setup(
  $name,
  $description: null,
) {
  $description: $description or data.context('test');
  @include data.context(
    'assert',
    '[#{$name}] #{$description}'
  );
}

@mixin strike(
  $result,
  $output: false
) {
  @include data.update-test($result);
  @include data.update-stats-count('assertions');
  @include data.context-pop;
  @if ($output) {
    @include data.output-context(null);
  }
}

// Value Result
// ------------
/// Get an official result,
/// record it in the database and output,
/// provide details as necessary,
/// and end the assertion.
///
/// @access private
/// @group assert-utils
///
/// @param {*} $assert - Value to consider
/// @param {*} $expected - Expected match
/// @param {bool} $unequal [false] -
///   Set to `true` if the comparison is expected to fail
///
/// @output - Document the passing or failing result of the test
@mixin result(
  $assert,
  $expected,
  $unequal: false,
  $terminal: config.$terminal-output
) {
  $result: data.get-result($assert, $expected, $unequal);

  @if $result == 'pass' {
    @include data.pass-details;
  } @else {
    @include data.fail-details($assert, $expected, $terminal);
  }

  @include strike($result);
}

// Is Truthy
// ---------
/// Check that a value is truthy
/// (empty lists and strings return false)
///
/// @access private
/// @group assert-utils
/// @param {*} $assert - Value to consider
/// @return {bool} -
@function is-truthy($assert) {
  $not: (not not $assert);
  $list: ($assert != ());
  $string: ($assert != '');
  $truthy: if(($not and $list and $string), true, false);

  @return $truthy;
}
