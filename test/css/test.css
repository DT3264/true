@charset "UTF-8";
/* # Module: True Message */
/* ---------------------- */
/* Test: Simple messages */
/*   ASSERT: Render as CSS comments   */
/*   OUTPUT   */
/* This is a simple message */
/*   END_OUTPUT   */
/*   EXPECTED   */
/* This is a simple message */
/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/* Test: Multi-line messages */
/*   ASSERT: Render as multiple CSS comments   */
/*   OUTPUT   */
/* This is a */
/* multiline message */
/*   END_OUTPUT   */
/*   EXPECTED   */
/* This is a */
/* multiline message */
/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: True Error [function] */
/* ------------------------------- */
/* Test: Allow errors to return without blocking compilation */
/*   ✔ [assert-equal] Allow errors to return without blocking compilation */
/*  */
/*  */
/* # Module: True Error [mixin] */
/* ---------------------------- */
/* Test: Allow errors to output without blocking compilation */
/*   ASSERT   */
/*   OUTPUT   */
.test-output {
  /* ERROR [error test] This is a test error message */
}

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  /* ERROR [error test] This is a test error message */
}

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: Map Add [function] */
/* ---------------------------- */
/* Test: Returns a map with the sum-values of two numeric maps */
/*   ✔ [assert-equal] Returns a map with the sum-values of two numeric maps */
/*  */
/*  */
/* # Module: Join Multiple [function] */
/* ---------------------------------- */
/* Test: Combines multiple lists */
/*   ✔ [assert-equal] Combines multiple lists */
/*  */
/* Test: Sets new list-separator */
/*   ✔ [assert-equal] Sets new list-separator */
/*  */
/*  */
/* # Module: context & context-pop [mixins] */
/* ---------------------------------------- */
/* Test: Adds scope and name to context */
/*   ✔ [assert-unequal] Confirm that there is currently no "fake" scope */
/*   ✔ [assert-unequal] Confirm that there is currently no "fake" scope */
/*   ✔ [assert-equal] Sets the value of scope "fake" to "this scope is not real" */
/*   ✔ [assert-unequal] Confirm that "fake" scope has been removed */
/*   ✔ [assert-unequal] Confirm that "fake" scope has been removed */
/*  */
/*  */
/* # Module: context & context-all [functions] */
/* ------------------------------------------- */
/* Test: Returns current module context */
/*   ✔ [assert-equal] Returns current module context */
/*  */
/* Test: Returns current test context */
/*   ✔ [assert-equal] Returns current test context */
/*  */
/* # Module: context & context-all [functions] :: nested */
/* ----------------------------------------------------- */
/* Test: Returns the innermost module name */
/*   ✔ [assert-equal] Returns the innermost module name */
/*  */
/* Test: context-all [function] */
/*   ✔ [assert-equal] Returns the current stack of module names */
/*  */
/*  */
/*  */
/* # Module: validate-output-context [function] */
/* -------------------------------------------- */
/* Test: unknown context name */
/*   ✔ [assert-equal] unknown context name */
/*  */
/* Test: duplicate assert */
/*   ✔ [assert-equal] duplicate assert */
/*  */
/* Test: duplicate output/expect */
/*   ✔ [assert-equal] duplicate output/expect */
/*  */
/* Test: missing assert */
/*   ✔ [assert-equal] missing assert */
/*  */
/* Test: wrong length */
/*   ✔ [assert-equal] wrong length */
/*  */
/* Test: missing context */
/*   ✔ [assert-equal] missing context */
/*  */
/*  */
/* # Module: output-context [mixin] */
/* -------------------------------- */
/* Test: Appends new context */
/*   ✔ [assert-equal] Check initial value */
/*   ✔ [assert-equal] Appends new context */
/*   ✔ [assert-equal] Appends new context */
/*   ✔ [assert-equal] Appends new context */
/*  */
/* Test: Resets context */
/*   ✔ [assert-equal] Resets context */
/*  */
/*  */
/* # Module: pass-details [mixin] */
/* ------------------------------ */
/* Test: Properly output a passing assertion result */
/*   ASSERT: passing test   */
/*   OUTPUT   */
.test-output {
  /*   ✔ [output] passing test */
}

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  /*   ✔ [output] passing test */
}

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: variable-details [function] */
/* ------------------------------------- */
/* Test: Number */
/*   ✔ [assert-equal] Number */
/*  */
/* Test: Color */
/*   ✔ [assert-equal] Color */
/*  */
/* Test: Map */
/*   ✔ [assert-equal] Map */
/*  */
/* Test: Bracketed List */
/*   ✔ [assert-equal] Bracketed List */
/*  */
/*  */
/* # Module: edgefail-notes [function] */
/* ----------------------------------- */
/* Test: Type mismatch */
/*   ✔ [assert-equal] Type mismatch */
/*   ✔ [assert-equal] Type mismatch */
/*  */
/* Test: Number rounding */
/*   ✔ [assert-equal] Number rounding */
/*  */
/* Test: Color rounding */
/*   ✔ [assert-equal] Color rounding */
/*  */
/* Test: List Separators */
/*   ✔ [assert-equal] List Separators */
/*  */
/*  */
/* # Module: fail-details [mixin] */
/* ------------------------------ */
/* Test: Compiles full failure details */
/*   ASSERT   */
/*   OUTPUT   */
.test-output {
  /*   ✖ FAILED: [assert-equal] Test assertion */
  /*     - Output: [number] 0.3333333333 */
  /*     - Expected: [number] 0.3333333333 */
  /*     - Details: numbers may need to be rounded before comparison (set `$inspect: true` to compare output values) */
  /*     - Module: fail-details [mixin] */
  /*     - Test: Compiles full failure details */
}

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  /*   ✖ FAILED: [assert-equal] Test assertion */
  /*     - Output: [number] 0.3333333333 */
  /*     - Expected: [number] 0.3333333333 */
  /*     - Details: numbers may need to be rounded before comparison (set `$inspect: true` to compare output values) */
  /*     - Module: fail-details [mixin] */
  /*     - Test: Compiles full failure details */
}

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: Get Result */
/* -------------------- */
/* Test: Equal Pass */
/*   ✔ [assert-equal] Equal Pass */
/*  */
/* Test: Equal Fail */
/*   ✔ [assert-equal] Equal Fail */
/*  */
/* Test: Unequal pass */
/*   ✔ [assert-equal] Unequal pass */
/*  */
/* Test: Unequal fail */
/*   ✔ [assert-equal] Unequal fail */
/*  */
/*  */
/* # Module: Update Results */
/* ------------------------ */
/* Test: Add one run */
/*   ✔ [assert-equal] Add one run */
/*  */
/* Test: Add one pass */
/*   ✔ [assert-equal] Add one pass */
/*  */
/* Test: Fail counts are left as-is */
/*   ✔ [assert-equal] Fail counts are left as-is */
/*  */
/* Test: Output counts are left as-is */
/*   ✔ [assert-equal] Output counts are left as-is */
/*  */
/*  */
/* # Module: Update Test */
/* --------------------- */
/* Test: Updates global test-result */
/*   ✔ [assert-equal] confirm the default state */
/*   ✔ [assert-equal] confirm updated test-result */
/*  */
/* Test: Output-to-css overrides pass */
/*   ✔ [assert-equal] Output-to-css overrides pass */
/*  */
/* Test: Pass does not override output-to-css */
/*   ✔ [assert-equal] Pass does not override output-to-css */
/*  */
/* Test: Fail overrides everything */
/*   ✔ [assert-equal] Fail overrides everything */
/*  */
/* Test: Nothing overrides fail */
/*   ✔ [assert-equal] Nothing overrides fail */
/*  */
/*  */
/* # Module: results-message [function] */
/* ------------------------------------ */
/* Test: Single Line */
/*   ✔ [assert-equal] Single Line */
/*  */
/* Test: Linebreaks */
/*   ✔ [assert-equal] Linebreaks */
/*  */
/* Test: No output tests */
/*   ✔ [assert-equal] No output tests */
/*  */
/* Test: Single test */
/*   ✔ [assert-equal] Single test */
/*  */
/*  */
/* # Module: Update Stats Count */
/* ---------------------------- */
/* Test: Assertions counts are updated */
/*   ✔ [assert-equal] Assertions counts are updated */
/*  */
/* Test: Modules counts are left as-is */
/*   ✔ [assert-equal] Modules counts are left as-is */
/*  */
/* Test: Tests counts are left as-is */
/*   ✔ [assert-equal] Tests counts are left as-is */
/*  */
/*  */
/* # Module: stats-message [function] */
/* ---------------------------------- */
/* Test: Single Line */
/*   ✔ [assert-equal] Single Line */
/*  */
/* Test: Linebreaks */
/*   ✔ [assert-equal] Linebreaks */
/*  */
/*  */
/* # Module: Is Truthy */
/* ------------------- */
/* Test: True is truthy */
/*   ✔ [assert-equal] True is truthy */
/*  */
/* Test: String is truthy */
/*   ✔ [assert-equal] String is truthy */
/*  */
/* Test: List is truthy */
/*   ✔ [assert-equal] List is truthy */
/*  */
/* Test: False is not truthy */
/*   ✔ [assert-equal] False is not truthy */
/*  */
/* Test: Null is not truthy */
/*   ✔ [assert-equal] Null is not truthy */
/*  */
/* Test: Empty string is not truthy */
/*   ✔ [assert-equal] Empty string is not truthy */
/*  */
/* Test: Empty list is not truthy */
/*   ✔ [assert-equal] Empty list is not truthy */
/*  */
/*  */
/* # Module: Assert True */
/* --------------------- */
/* Test: Truthiness */
/*   ✔ [assert-true] Non-false properties return true. */
/*  */
/*  */
/* # Module: Assert False */
/* ---------------------- */
/* Test: Falsiness */
/*   ✔ [assert-false] Negated properties return false. */
/*  */
/* Test: null */
/*   ✔ [assert-false] Null properties return false. */
/*  */
/* Test: Empty string */
/*   ✔ [assert-false] Empty string return false. */
/*  */
/* Test: empty list */
/*   ✔ [assert-false] Empty lists return false. */
/*  */
/*  */
/* # Module: Assert Equal */
/* ---------------------- */
/* Test: Equality */
/*   ✔ [assert-equal] 2 - 1 should equal 1. */
/*  */
/* Test: Empty description */
/*   ✔ [assert-equal] Empty description */
/*  */
/* Test: Adding floats */
/*   ✔ [assert-equal] Adding floats */
/*  */
/* Test: Rounded numbers with $inspect */
/*   ✔ [assert-equal] Rounded numbers with $inspect */
/*  */
/* Test: Rounded colors with $inspect */
/*   ✔ [assert-equal] Rounded colors with $inspect */
/*  */
/* Test: Mismatched types with $inspect */
/*   ✔ [assert-unequal] normally unequal */
/*   ✔ [assert-equal] Mismatched types with $inspect */
/*  */
/*  */
/* # Module: Assert UnEqual */
/* ------------------------ */
/* Test: Inequality */
/*   ✔ [assert-unequal] 3 - 1 is not equal to 3. */
/*  */
/* Test: Mismatched types */
/*   ✔ [assert-unequal] Mismatched types */
/*  */
/* Test: Mismatched units no longer needs $inspect */
/*   ✔ [assert-unequal] Mismatched units no longer needs $inspect */
/*  */
/*  */
/* # Module: Assert/Output */
/* ----------------------- */
/* Test: CSS output math */
/*   ASSERT: Output math compares properly   */
/*   OUTPUT   */
.test-output {
  -property1: 0.3;
  -property2: 0.3333333333;
}

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  -property1: 0.3;
  -property2: 0.3333333333;
}

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/* Test: output/expect [mixins] */
/*   ASSERT: Output and expected selector patterns match   */
/*   OUTPUT   */
.test-output {
  -property: value;
}
@media (min-width: 30em) {
  .test-output {
    -prop: val;
  }
  .selector {
    -prop: val;
  }
}

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  -property: value;
}
@media (min-width: 30em) {
  .test-output {
    -prop: val;
  }
  .selector {
    -prop: val;
  }
}

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: Assert/Contains */
/* ------------------------- */
/* Test: Contains sub-string */
/*   ASSERT   */
/*   OUTPUT   */
.test-output {
  height: 10px;
  width: 20px;
}

/*   END_OUTPUT   */
/*   CONTAINED   */
.test-output {
  height: 10px;
}

/*   END_CONTAINED   */
/*   END_ASSERT   */
/*  */
/* Test: Contains nested selector block */
/*   ASSERT   */
/*   OUTPUT   */
.test-output {
  height: 20px;
}
.test-output .class {
  height: 10px;
}
.test-output .other-class {
  height: 10px;
}

/*   END_OUTPUT   */
/*   CONTAINED   */
.test-output .class {
  height: 10px;
}

/*   END_CONTAINED   */
/*   END_ASSERT   */
/*  */
/* Test: Can be used with nested classes */
/*   ASSERT   */
/*   OUTPUT   */
.test-output {
  height: 20px;
}
.test-output .class {
  height: 10px;
}
.test-output .class .other-class {
  height: 10px;
}

/*   END_OUTPUT   */
/*   CONTAINED   */
.test-output .class .other-class {
  height: 10px;
}

/*   END_CONTAINED   */
/*   END_ASSERT   */
/*  */
/* Test: Can be used with nested @media queries */
/*   ASSERT   */
/*   OUTPUT   */
.test-output .class {
  height: 20px;
}
@media (min-width: 30em) and (min-width: 40em) {
  .test-output .selector {
    height: 10px;
  }
  .test-output .selector2 {
    height: 10px;
  }
}
@media (min-width: 30em) {
  .test-output .selector3 {
    height: 10px;
  }
}

/*   END_OUTPUT   */
/*   CONTAINED   */
@media (min-width: 30em) and (min-width: 40em) {
  .test-output .selector2 {
    height: 10px;
  }
}

/*   END_CONTAINED   */
/*   END_ASSERT   */
/*  */
/* Test: Can be used with @at-root */
/*   ASSERT   */
/*   OUTPUT   */
.selector {
  height: 10px;
}

/*   END_OUTPUT   */
/*   CONTAINED   */
.selector {
  height: 10px;
}

/*   END_CONTAINED   */
/*   END_ASSERT   */
/*  */
/* Test: Can be used for all selector types */
/*   ASSERT   */
/*   OUTPUT   */
.test-output .selector {
  -prop: val;
}
.test-output #id {
  -prop: value1;
}
.test-output div {
  -prop: value2;
  min-height: 20px;
  max-height: 30px;
}
.test-output input[type=text] {
  color: rebeccapurple;
}
.test-output * + * {
  color: red;
  display: none;
}
.test-output body > h1 {
  font-weight: bold;
}
.test-output i::before {
  -prop: value3;
}
.test-output div ~ p {
  color: green;
}
.test-output i:not(.italic) {
  text-decoration: underline;
  --custom: val;
}

/*   END_OUTPUT   */
/*   CONTAINED   */
.test-output .selector {
  -prop: val;
}
.test-output div {
  max-height: 30px;
}
.test-output body > h1 {
  font-weight: bold;
}
.test-output * + * {
  display: none;
}
.test-output i:not(.italic) {
  text-decoration: underline;
}

/*   END_CONTAINED   */
/*   END_ASSERT   */
/*  */
/* Test: Can assert multiple properties within a selector */
/*   ASSERT   */
/*   OUTPUT   */
.test-output .selector {
  width: 10px;
  min-height: 5px;
  max-height: 20px;
}

/*   END_OUTPUT   */
/*   CONTAINED   */
.test-output .selector {
  width: 10px;
  max-height: 20px;
}

/*   END_CONTAINED   */
/*   END_ASSERT   */
/*  */
/*  */
.not-a-test {
  break: please-no;
}

/*# sourceMappingURL=test.css.map */
