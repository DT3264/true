@use "sass:color";
@use "sass:string";
@use "../../sass/true/assert";
@use "../../sass/true/modules";
@use "../../sass/true/tests";

// Test Assertions
// ===============

// Is Truthy
@include modules.test-module('Is Truthy') {
  @include tests.test('True is truthy') {
    @include assert.assert-equal(assert.is-truthy(true), true);
  }

  @include tests.test('String is truthy') {
    @include assert.assert-equal(assert.is-truthy('string'), true);
  }

  @include tests.test('List is truthy') {
    @include assert.assert-equal(assert.is-truthy('one' 'two' 'three'), true);
  }

  @include tests.test('False is not truthy') {
    @include assert.assert-equal(assert.is-truthy(false), false);
  }

  @include tests.test('Null is not truthy') {
    @include assert.assert-equal(assert.is-truthy(null), false);
  }

  @include tests.test('Empty string is not truthy') {
    @include assert.assert-equal(assert.is-truthy(''), false);
  }

  @include tests.test('Empty list is not truthy') {
    $list: ();

    @include assert.assert-equal(assert.is-truthy($list), false);
  }
}

// Assert True
@include modules.test-module('Assert True') {
  @include tests.test('Truthiness') {
    @include assert.assert-true('this string', 'Non-false properties return true.');
  }
}

// Assert False
@include modules.test-module('Assert False') {
  @include tests.test('Falsiness') {
    @include assert.assert-false(not 'anything', 'Negated properties return false.');
  }

  @include tests.test('null') {
    @include assert.assert-false(null, 'Null properties return false.');
  }

  @include tests.test('Empty string') {
    @include assert.assert-false('', 'Empty string return false.');
  }

  @include tests.test('empty list') {
    $empty: ();

    @include assert.assert-false($empty, 'Empty lists return false.');
  }
}

// Assert Equal
@include modules.test-module('Assert Equal') {
  @include tests.test('Equality') {
    @include assert.assert-equal(2 - 1, 1, '2 - 1 should equal 1.');
  }

  @include tests.test('Empty description') {
    @include assert.assert-equal(1, 1);
  }

  @include tests.test('Adding floats') {
    @include assert.assert-equal(0.1 + 0.2, 0.3, $inspect: true);
  }

  @include tests.test('Rounded numbers with $inspect') {
    @include assert.assert-equal(1/3, 0.3333333333, $inspect: true);
  }

  @include tests.test('Rounded colors with $inspect') {
    $origin: #246;
    $expected: #356a9f;

    @include assert.assert-equal(
      color.adjust($origin, $lightness: 15%),
      $expected,
      $inspect: true
    );
  }

  @include tests.test('Mismatched types with $inspect') {
    @include assert.assert-unequal(
      string.unquote('1rem'),
      1rem,
      'normally unequal'
    );
    @include assert.assert-equal(
      string.unquote('1rem'),
      1rem,
      $inspect: true
    );
  }
}


// Assert UnEqual
@include modules.test-module('Assert UnEqual') {
  @include tests.test('Inequality') {
    @include assert.assert-unequal(3 - 1, 3, '3 - 1 is not equal to 3.');
  }

  @include tests.test('Mismatched types') {
    @include assert.assert-unequal(string.unquote('1rem'), 1rem);
  }

  @include tests.test('Mismatched units no longer needs $inspect') {
    @include assert.assert-unequal(1, 1rem);
  }
}

// Assert [output]
@include modules.test-module('Assert(output)') {
  @include tests.test('CSS output math') {
    @include assert.assert('Output math compares properly') {
      @include assert.output {
        -property1: 0.1 + 0.2;
        -property2: (1 / 3);
      }

      @include assert.expect {
        -property1: 0.3;
        -property2: 0.3333333333;
      }
    }
  }

  @include tests.test('output/expect [mixins]') {
    @include assert.assert('Output and expected selector patterns match') {
      @include assert.output {
        -property: value;

        @media (min-width: 30em) {
          -prop: val;

          @at-root {
            .selector {
              -prop: val;
            }
          }
        }
      }

      @include assert.expect {
        -property: value;
        @media (min-width: 30em) {
          -prop: val;
          @at-root {
            .selector {
              -prop: val;
            }
          }
        }
      }
    }
  }

  @include modules.test-module('Assert(contains)') {
    @include tests.test(
      'Passes if the property in "contains" exists in the "output" and has the same value'
    ) {
      @include assert.assert {
        @include assert.output {
          height: 10px;
          width: 20px;
        }

        @include assert.contains {
          height: 10px;
        }
      }
    }

    @include tests.test(
      'Passes if the property and its value in class in "contains" exists in the same class in "output"'
    ) {
      @include assert.assert {
        @include assert.output {
          height: 20px;
          .class {
            height: 10px;
          }
          .other-class {
            height: 10px;
          }
        }

        @include assert.contains {
          .class {
            height: 10px;
          }
        }
      }
    }

    @include tests.test('Can be used with nested classes') {
      @include assert.assert {
        @include assert.output {
          height: 20px;
          .class {
            height: 10px;
            .other-class {
              height: 10px;
            }
          }
        }

        @include assert.contains {
          .class {
            .other-class {
              height: 10px;
            }
          }
        }
      }
    }

    @include tests.test('Can be used with nested @media queries') {
      @include assert.assert {
        @include assert.output {
          .class {
            height: 20px;
          }
          @media (min-width: 30em) {
            @media (min-width: 40em) {
              .selector {
                height: 10px;
              }
              .selector2 {
                height: 10px;
              }
            }
            .selector3 {
              height: 10px;
            }
          }
        }

        @include assert.contains {
          @media (min-width: 30em) {
            @media (min-width: 40em) {
              .selector2 {
                height: 10px;
              }
            }
          }
        }
      }
    }

    @include tests.test('Can be used with @at-root') {
      @include assert.assert {
        @include assert.output {
          @at-root {
            .selector {
              height: 10px;
            }
          }
        }

        @include assert.contains {
          @at-root {
            .selector {
              height: 10px;
            }
          }
        }
      }
    }

    @include tests.test('Can be used for all selector types') {
      @include assert.assert {
        @include assert.output {
          .selector {
            -prop: val;
          }
          #id {
            -prop: value1;
          }
          div {
            -prop: value2;
            min-height: 20px;
            max-height: 30px;
          }

          input[type='text'] {
            color: rebeccapurple;
          }

          * + * {
            color: red;
            display: none;
          }

          body > h1 {
            font-weight: bold;
          }

          i::before {
            -prop: value3;
          }

          div ~ p {
            color: green;
          }

          i:not(.italic) {
            text-decoration: underline;
            --custom: val;
          }
        }

        @include assert.contains {
          .selector {
            -prop: val;
          }

          div {
            max-height: 30px;
          }

          body > h1 {
            font-weight: bold;
          }

          * + * {
            display: none;
          }

          i:not(.italic) {
            text-decoration: underline;
          }
        }
      }
    }

    @include tests.test('Can assert multiple properties within a selector') {
      @include assert.assert {
        @include assert.output {
          .selector {
            width: 10px;
            min-height: 5px;
            max-height: 20px;
          }
        }

        @include assert.contains {
          .selector {
            width: 10px;
            max-height: 20px;
          }
        }
      }
    }
  }
}
