@use "sass:map";
@use "../../sass/assert";
@use "../../sass/true/messages";
@use "../../sass/true/modules";
@use "../../sass/true/report";
@use "../../sass/true/tests";
@use "../../sass/true/utilities";

// Report Tests
// ============

$fake-stats: (
  'modules': 4,
  'tests': 6,
  'assertions': 25,
);

$single-stats: '4 Modules, 6 Tests, 25 Assertions';
$multi-stats: ('Stats:', '- 4 Modules', '- 6 Tests', '- 25 Assertions');

$fake-results: (
  'run': 6,
  'pass': 5,
  'fail': 1,
  'output-to-css': 0,
);

$single-results: '6 Tests, 5 Passed, 1 Failed';
$multi-results: ('6 Tests:', '- 5 Passed', '- 1 Failed');

$single: ($single-results, $single-stats);
$multi: utilities.join-multiple(
  '# SUMMARY ----------',
  $multi-results,
  $multi-stats,
  '--------------------'
);

@include modules.test-module('report [mixin]') {
  @include tests.test('Output Message') {
    @include assert.assert {
      @include assert.output {
        @include report.report(false, false, $fake-results, $fake-stats);
      }
      @include assert.expect {
        @include messages.message($multi, 'comments');
      }
    }
  }

  @include tests.test('Fail on Error') {
    @include assert.assert {
      @include assert.output {
        @include report.report(false, 'fail on error', $fake-results, $fake-stats);
      }
      @include assert.expect {
        @include messages.message($multi, 'comments');
        @include utilities.error('1 test failed', 'report');
      }
    }
  }

  @include tests.test('Bad results') {
    $bad-results: map.merge(
      $fake-results,
      (
        'pass': 4,
      )
    );
    $bad-lines: ('6 Tests:', '- 4 Passed', '- 1 Failed');
    $bad: utilities.join-multiple(
      '# SUMMARY ----------',
      $bad-lines,
      $multi-stats,
      '--------------------'
    );

    @include assert.assert {
      @include assert.output {
        @include report.report(false, false, $bad-results, $fake-stats);
      }
      @include assert.expect {
        @include messages.message($bad, 'comments');
        @include utilities.error(
          'The results donâ€™t add up. Are all your tests properly structured?',
          'report'
        );
      }
    }
  }
}

@include modules.test-module('report-message [function]') {
  @include tests.test('Single Line') {
    @include assert.assert-equal(
      report.report-message(not 'linebreaks', $fake-results, $fake-stats),
      $single
    );
  }

  @include tests.test('Linebreaks') {
    @include assert.assert-equal(
      report.report-message('linebreaks', $fake-results, $fake-stats),
      $multi
    );
  }
}
